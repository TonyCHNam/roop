name: ci

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install flake8 and mypy
        run: |
          pip install flake8 mypy
      - name: Lint with flake8
        run: flake8 run.py roop
      - name: Type-check with mypy
        run: mypy run.py roop

  test:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies from headless requirements
        run: pip install -r requirements-headless.txt

      - name: Install additional dependencies
        run: |
          pip install -r requirements.txt
          pip install gfpgan==1.3.8 realesrgan==0.3.0 simswap
        # 주의: first_order_model은 pip 설치 대신, 별도 클론/설치 가이드로 안내합니다.

      - name: Force reinstall TensorFlow 2.13.0
        run: pip install tensorflow==2.13.0 --force-reinstall

      - name: Clone SimSwap repository
        run: git clone https://github.com/neuralchen/SimSwap.git SimSwap

      - name: Set PYTHONPATH for SimSwap
        run: echo "PYTHONPATH=${{ github.workspace }}/SimSwap:$PYTHONPATH" >> $GITHUB_ENV

      - name: Run roop in headless mode (non-Windows)
        run: python run.py -s .github/examples/source.jpg -t .github/examples/target.mp4 -o .github/examples/output.mp4
        if: matrix.os != 'windows-latest'

      - name: Run roop in headless mode (Windows)
        run: python run.py -s .github\examples\source.jpg -t .github\examples\target.mp4 -o .github\examples\output.mp4
        if: matrix.os == 'windows-latest'

      - name: Evaluate PSNR (non-Windows)
        run: ffmpeg -i .github/examples/snapshot.mp4 -i .github/examples/output.mp4 -filter_complex psnr -f null -
        if: matrix.os != 'windows-latest'

      - name: Evaluate PSNR (Windows)
        run: ffmpeg -i .github\examples\snapshot.mp4 -i .github\examples\output.mp4 -filter_complex psnr -f null -
        if: matrix.os == 'windows-latest'

      - name: Evaluate SSIM (non-Windows)
        run: ffmpeg -i .github/examples/snapshot.mp4 -i .github/examples/output.mp4 -filter_complex ssim -f null -
        if: matrix.os != 'windows-latest'

      - name: Evaluate SSIM (Windows)
        run: ffmpeg -i .github\examples\snapshot.mp4 -i .github\examples\output.mp4 -filter_complex ssim -f null -
        if: matrix.os == 'windows-latest'

      - name: Apply Super Resolution using Real-ESRGAN
        run: python -m realesrgan --input .github/examples/output.mp4 --output .github/examples/output_4K.mp4 --scale 2
